schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"Dog Type"
type Dog {
  id: ID!
  name: String!
  owner: Human
}

"Human Type"
type Human {
  id: ID!
  """
  Human Name
  """
  name: String!
  dogs: [Dog!]
  fieldWithArg(a: String = "Hello World"): Int @deprecated
}

"Query Type"
type Query {
  "Expected Error!"
  expectedError: Boolean!
  expectedNullableError: Boolean
  thirdTry: Boolean!
  dogs: [Dog!]!
  time: String!
  stringList: [String!]!
  humans: [Human!]!
  human1: Human!
  human1Other: Human!
  paginatedHumans(
    "Paginated Humans Input"
    input: ConnectionArgs!
  ): HumansConnection!
  emptyScalarArray: [Int!]!
  emptyHumanArray: [Human!]!
}

"Mutation"
type Mutation {
  renameDog(
    """
    Dog Id
    """
    id: ID!
    name: String!
  ): Dog
  renameHuman(id: ID!, name: String!): Human
  other(arg: inputTypeExample!): Int
  createHuman(id: ID!, name: String!): Human!
  sendNotification(message: String!): Boolean!
  uploadFile(file: Upload!): String!
}

type Subscription {
  newNotification: String!
}

"Input Type Example XD"
input inputTypeExample {
  a: String!
  other: Int = 1
}

"Humans Connection"
type HumansConnection {
  pageInfo: PageInfo!
  nodes: [Human!]!
}

"""
Page Info Object
"""
type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String
  endCursor: String
}

"ConnectionArgs description!"
input ConnectionArgs {
  first: Int
  after: String
  last: Int @deprecated(reason: "asd")
  before: String
}

union Species = Human | Dog

"Dog Type"
enum DogType {
  Big
  Small
  Other @deprecated
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload
